workflow:
  rules:
    - if: $CI_COMMIT_REF_PROTECTED == "true"

variables:
  # Debugging facilities
  CI_DEBUG_TRACE: "true"
  # Access to Docker
  DOCKER_DRIVER: overlay2
  DOCKER_HOST: tcp://docker:2376
  DOCKER_TLS_VERIFY: 1
  DOCKER_TLS_CERTDIR: "/certs"
  DOCKER_CERT_PATH: "${DOCKER_TLS_CERTDIR}/client"
  # Paths
  ARTIFACTS_DIR: "${CI_PROJECT_DIR}/artifacts"

stages:
  - build
  - release
  - deploy

docker-build-job:
  stage: build
  image: docker:24.0.5
  services:
      - name: docker:24.0.5-dind
        command: ["--mtu=1460"]
  rules:
    - changes:
        paths:
          - docker/*
          - python/*
  script:
    - until docker info; do sleep 1; done
    - echo "${CI_REGISTRY_PASSWORD}" | docker login -u "${CI_REGISTRY_USER}" --password-stdin "${CI_REGISTRY}"
    - >-
        docker
        build
        --progress=plain
        --cache-from "${CI_REGISTRY_IMAGE}":latest
        --squash
        --pull
        --tag "${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHORT_SHA}"
        --file docker/Dockerfile
        .
    - docker push "${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHORT_SHA}"

helm-build-job:
  stage: build
  image: alpine/k8s:1.27.8
  rules:
    - changes:
        paths:
          - helm/*
  artifacts:
    paths:
      - "${ARTIFACTS_DIR}/*.tgz"
  script:
    - helm dependency update helm/
    - helm lint helm/
    - helm template helm/
    - mkdir -p "${ARTIFACTS_DIR}"
    - helm package -u -d "${ARTIFACTS_DIR}" helm/

docker-release-preview-job:
  stage: release
  image: docker:24.0.5
  services:
      - name: docker:24.0.5-dind
        command: ["--mtu=1460"]
  rules:
    - if: $CI_COMMIT_TAG !~ /^release-.*$/
  script:
    - until docker info; do sleep 1; done
    - echo "${CI_REGISTRY_PASSWORD}" | docker login -u "${CI_REGISTRY_USER}" --password-stdin "${CI_REGISTRY}"
    - docker pull "${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHORT_SHA}"
    - docker tag "${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHORT_SHA}" "${CI_REGISTRY_IMAGE}:preview"
    - docker push --all-tags "${CI_REGISTRY_IMAGE}"
    - docker logout

docker-release-job:
  stage: release
  image: docker:24.0.5
  services:
      - name: docker:24.0.5-dind
        command: ["--mtu=1460"]
  rules:
    - if: $CI_COMMIT_TAG =~ /^release-.*$/
  script:
    - until docker info; do sleep 1; done
    - echo "${CI_REGISTRY_PASSWORD}" | docker login -u "${CI_REGISTRY_USER}" --password-stdin "${CI_REGISTRY}"
    - docker pull "${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHORT_SHA}"
    - VERSION="${CI_COMMIT_TAG#'release-'}"
    - VERSION_PATCH="${VERSION}"
    - VERSION_MINOR="${VERSION%.*}"
    - VERSION_MAJOR="${VERSION%.*.*}"
    - docker tag "${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHORT_SHA}" "${CI_REGISTRY_IMAGE}:${VERSION}"
    - docker tag "${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHORT_SHA}" "${CI_REGISTRY_IMAGE}:${VERSION_PATCH}"
    - docker tag "${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHORT_SHA}" "${CI_REGISTRY_IMAGE}:${VERSION_MINOR}"
    - docker tag "${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHORT_SHA}" "${CI_REGISTRY_IMAGE}:${VERSION_MAJOR}"
    - docker tag "${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHORT_SHA}" "${CI_REGISTRY_IMAGE}:${CI_COMMIT_TAG}"
    - docker tag "${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHORT_SHA}" "${CI_REGISTRY_IMAGE}:latest"
    - docker push --all-tags "${CI_REGISTRY_IMAGE}"
    - docker logout

helm-release-job:
  stage: release
  image: alpine/k8s:1.27.8
  rules:
    - changes:
        - helm/*
  dependencies:
    - helm-build-job
  script:
    - >-
        export chart_version="$(
          helm show chart helm/ | awk '/^version: / { print $2 }'
        )"
    - >-
        helm
        repo
        add
        --username gitlab-ci-token
        --password "${CI_JOB_TOKEN}"
        "${CI_PROJECT_NAME}"
        "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/helm/stable"
    - helm cm-push "${ARTIFACTS_DIR}/${CI_PROJECT_NAME}-${chart_version}.tgz" "${CI_PROJECT_NAME}"

helm-deploy-preview-job:
  stage: deploy
  image: alpine/k8s:1.27.8
  rules:
    - if: $CI_COMMIT_TAG !~ /^release-.*$/
  script:
    - mkdir -p /root/.kube
    - export KUBECONFIG="/root/.kube/config"
    - touch "${KUBECONFIG}"
    - kubectl config set-cluster k8s --server "${K8S_URL}"
    - kubectl config set-credentials deployer --token "${K8S_TOKEN}"
    - kubectl config set-context default --cluster k8s --user deployer
    - kubectl config set-context default --namespace "${K8S_NAMESPACE}"
    - kubectl config use-context default
    - kubectl config set clusters.k8s.certificate-authority-data "$(echo "${K8S_CA_CERTIFICATE}" | base64 -w 0)"
    - cat "${KUBECONFIG}"
    - >-
        helm
        repo
        add
        --username gitlab-ci-token
        --password "${CI_JOB_TOKEN}"
        "${CI_PROJECT_NAME}"
        "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/helm/stable"
    - >-
        helm
        upgrade
        --install
        --set-string image.tag="${CI_COMMIT_SHORT_SHA}"
        --set-string dockerRegistryCredentials.username="${CI_DEPLOY_USER}"
        --set-string dockerRegistryCredentials.password="${CI_DEPLOY_PASSWORD}"
        --set-string vault.caBundle.pem="${VAULT_CA_BUNDLE}"
        preview
        "${CI_PROJECT_NAME}/${CI_PROJECT_NAME}"