hull:
  objects:
    role:
      default:
        enabled: false
    rolebinding:
      default:
        enabled: false
    serviceaccount:
      default:
        enabled: false
      _vault_client_demo:
        enabled: _HT?(index . "$").Values.serviceAccount.enabled
        staticName: _HT?(index . "$").Values.serviceAccount.name
        metadataNameOverride: _HT/util.serviceAccount.getName
        automountServiceAccountToken: true
    deployment:
      app:
        pod:
          imagePullSecrets: _HT/secrets/util.dockerRegistryCredentials.getImagePullSecrets
          serviceAccountName: _HT/util.serviceAccount.getName
          volumes:
            keys:
              persistentVolumeClaim:
                claimName: keys
            ca-bundle:
              enabled: _HT!(index . "$").Values.vault.caBundle.pem
              configMap:
                name: vault-ca-bundle
          containers:
            vault-client-demo:
              image:
                registry: _HT*image.registry
                repository: _HT*image.repository
                tag: _HT!{{ (index . "$").Values.image.tag | toJson | trimAll "\"" | quote }}
              args: _HT!
                [
                  {{ if (index . "$").Values.vault.caBundle.pem }}
                    "--vault-bundle {{ (index . "$").Values.vault.caBundle.mountPath }}/ca-bundle.pem",
                  {{ end }}
                  "--vault-url {{ (index . "$").Values.vault.url }}",
                  "--secret-path {{ (index . "$").Values.vault.secretPath }}",
                  "--port {{ (index . "$").Values.service.internalPort }}"
                ]
              ports:
                http:
                  containerPort: _HT*service.internalPort
                  protocol: TCP
              resources:
                requests:
                  cpu: 100m
                  memory: 128Mi
                limits:
                  cpu: 1000m
                  memory: 256Mi
              volumeMounts:
                keys:
                  name: keys
                  mountPath: _HT*keysStorage.mountPath
                ca-bundle:
                  name: ca-bundle
                  mountPath: _HT*vault.caBundle.mountPath
                  subPath: ca-bundle.pem
    secret:
      _docker_registry_credentials:
        enabled: _HT?(index . "$").Values.dockerRegistryCredentials.enabled
        staticName: _HT?(index . "$").Values.dockerRegistryCredentials.staticName
        metadataNameOverride: _HT*dockerRegistryCredentials.name
        type: kubernetes.io/dockerconfigjson
        data:
          .dockerconfigjson:
            inline: _HT!{{ include "util.dockerRegistryCredentials.generateDotDockerConfigJson" . | toJson }}
    configmap:
      vault-ca-bundle:
        enabled: _HT?(index . "$").Values.vault.caBundle.pem
        data:
          ca-bundle.pem:
            inline: _HT!{{ toJson (index . "$").Values.vault.caBundle.pem }}
    persistentvolumeclaim:
      keys:
        enabled: _HT?(index . "$").Values.keysStorage.enabled
        storageClassName: _HT*keysStorage.storageClassName
        accessModes:
          - ReadWriteMany
        resources:
          requests:
            storage: 10Mi
    service:
      app:
        enabled: _HT?(index . "$").Values.service.enabled
        type: ClusterIP
        ports:
          http:
            port: _HT*service.externalPort
            targetPort: http
    ingress:
      app:
        enabled: _HT?(index . "$").Values.ingress.enabled
        annotations: |-
          _HT!
            {{ if (index . "$").Values.ingress.certManager.enabled -}}
            cert-manager.io/
            {{- (index . "$").Values.ingress.certManager.issuer.type -}}:
            {{- " " -}}
            {{ (index . "$").Values.ingress.certManager.issuer.name -}}
            {{- end -}}
        rules:
          default:
            host: _HT*ingress.host
            http:
              paths:
                root:
                  path: /
                  pathType: Prefix
                  backend:
                    service:
                      name: app
                      port:
                        name: http
        tls:
          default:
            hosts:
              - _HT![{{ (index . "$").Values.ingress.host }}]
            secretName: tls-certificate

image:
  registry: registry.gitlab.tucha.ua
  repository: khmarochos/vault-client-demo
  tag: latest

dockerRegistryCredentials:
  enabled: false
  staticName: false
  name: "drc"
  registry: "registry.gitlab.tucha.ua/khmarochos/vault-client-demo"
  username: ""
  password: ""

serviceAccount:
  enabled: true
  staticName: true
  name: vault-client-demo

keysStorage:
  enabled: true
  storageClassName: "ceph-filesystem"
  mountPath: "/opt/vault-client-demo/keys"

service:
  enabled: true
  externalPort: "8080"
  internalPort: "8080"

ingress:
  enabled: true
  host: "vault-client-demo.example.net"
  certManager:
    enabled: true
    issuer:
      type: "cluster-issuer"
      name: "letsencrypt-production"

vault:
  url: "http://vault.d.kloudster.net:8200/"
  secretPath: "kloudster/data/vault-client-demo"
  caBundle:
    pem: ""
    mountPath: "/etc/vault-client-demo/etc"

